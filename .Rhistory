getwd()
sDat <- readRDS('./data/dollo.10.48.5.f0.gl10-u.dat')
sDat
source(ddclone)
source('R/ddclone.R)
df <- ddclone(dataPath = './data/dollo.10.48.5.f0.gl10-u.dat',
outputPath = './output', tumourContent = 1.0,
numOfIterations = 100, thinning = 1, burnIn = 10)
source('R/ddclone.R')
df <- ddclone(dataPath = './data/dollo.10.48.5.f0.gl10-u.dat',
outputPath = './output', tumourContent = 1.0,
numOfIterations = 100, thinning = 1, burnIn = 10)
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
ddclone(dataPath = dataPath = './data/dollo.10.48.5.f0.gl10-u.dat',
outputPath = './output/out1')
ddclone(dataPath = './data/dollo.10.48.5.f0.gl10-u.dat', outputPath = './output/out1')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddcrp-inference.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddcrp-inference.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddcrp-inference.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/summaries.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
dataPath = './data/dollo.10.48.5.f0.gl10-u.dat'
outputPath = './output/out1'
burnIn = 10
if (is.null(burnIn)) burnIn <- floor(niter/10)
MCMCOptions <- list(thinning = thinning, niter = numOfIterations, burnIn = burnIn)
dataPath = './data/dollo.10.48.5.f0.gl10-u.dat'
outputPath = './output/out1'
burnIn = 10; tumourContent = 1.0; numOfIterations = 100; a = 0.01; alpha = 0.01; s = 1000; seed = 1; useTraditionalCRP = F;
grid.mA = 100; grid.mS = 100; grid.mAlpha = 100
if (is.null(burnIn)) burnIn <- floor(niter/10)
MCMCOptions <- list(thinning = thinning, niter = numOfIterations, burnIn = burnIn)
hyperParams <- list(hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s)
decay.fn.name <- 'exp.decay.s'
dist.fn <- jaccardDist
useTraditionalCRP
set.seed(seed)
res <- driver(niter = numOfIterations, dist.fn = dist.fn,
decay.fn.name =  decay.fn.name,
decay.fn = getFunction(decay.fn.name),
dataPath = dataPath,
outputPath = outputPath,
tumourContent = tumourContent,
genotype.prior.scheme ='PCN',
hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s,
MCMCOptions = MCMCOptions,
grid.mA=grid.mA, grid.mS=grid.mS, grid.mAlpha=grid.mAlpha)
source('R/driver.R')
if (is.null(burnIn)) burnIn <- floor(niter/10)
MCMCOptions <- list(thinning = thinning, niter = numOfIterations, burnIn = burnIn)
hyperParams <- list(hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s)
decay.fn.name <- 'exp.decay.s'
dist.fn <- jaccardDist
if (useTraditionalCRP) {
decay.fn.name <- 'identity.decay'
dist.fn <- identity.s
}
set.seed(seed)
res <- driver(niter = numOfIterations, dist.fn = dist.fn,
decay.fn.name =  decay.fn.name,
decay.fn = getFunction(decay.fn.name),
dataPath = dataPath,
outputPath = outputPath,
tumourContent = tumourContent,
genotype.prior.scheme ='PCN',
hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s,
MCMCOptions = MCMCOptions,
grid.mA=grid.mA, grid.mS=grid.mS, grid.mAlpha=grid.mAlpha)
MCMCOptions
if (is.null(burnIn)) burnIn <- floor(niter/10)
MCMCOptions <- list(thinning = thinning, niter = numOfIterations, burnIn = burnIn)
burnIn = 10; thinning = 1; tumourContent = 1.0; numOfIterations = 100; a = 0.01; alpha = 0.01; s = 1000; seed = 1; useTraditionalCRP = F;
if (is.null(burnIn)) burnIn <- floor(niter/10)
MCMCOptions <- list(thinning = thinning, niter = numOfIterations, burnIn = burnIn)
hyperParams <- list(hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s)
decay.fn.name <- 'exp.decay.s'
dist.fn <- jaccardDist
if (useTraditionalCRP) {
decay.fn.name <- 'identity.decay'
dist.fn <- identity.s
}
set.seed(seed)
res <- driver(niter = numOfIterations, dist.fn = dist.fn,
decay.fn.name =  decay.fn.name,
decay.fn = getFunction(decay.fn.name),
dataPath = dataPath,
outputPath = outputPath,
tumourContent = tumourContent,
genotype.prior.scheme ='PCN',
hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s,
MCMCOptions = MCMCOptions,
grid.mA=grid.mA, grid.mS=grid.mS, grid.mAlpha=grid.mAlpha)
dataPath = './data/dollo.10.48.5.f0.gl10-u.dat'; outputPath = './output/out1'
burnIn = 10; thinning = 1; tumourContent = 1.0; numOfIterations = 100; a = 0.01; alpha = 0.01; s = 1000; seed = 1; useTraditionalCRP = F;
grid.mA = 100; grid.mS = 100; grid.mAlpha = 100
if (is.null(burnIn)) burnIn <- floor(niter/10)
MCMCOptions <- list(thinning = thinning, niter = numOfIterations, burnIn = burnIn)
hyperParams <- list(hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s)
decay.fn.name <- 'exp.decay.s'
dist.fn <- jaccardDist
if (useTraditionalCRP) {
decay.fn.name <- 'identity.decay'
dist.fn <- identity.s
}
set.seed(seed)
res <- driver(niter = numOfIterations, dist.fn = dist.fn,
decay.fn.name =  decay.fn.name,
decay.fn = getFunction(decay.fn.name),
dataPath = dataPath,
outputPath = outputPath,
tumourContent = tumourContent,
genotype.prior.scheme ='PCN',
hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s,
MCMCOptions = MCMCOptions,
grid.mA=grid.mA, grid.mS=grid.mS, grid.mAlpha=grid.mAlpha)
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
getwd()
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
plot(1)
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
plot(1)
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
plot(1)
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
plot(1)
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddcrp-inference.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
plot(1)
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
dataPath = './data/dollo.10.48.4.f0.gl0-u.dat'
outputPath = './output/out1'
burnIn = 1
seed = 10
numOfIterations = 10
# grid.mA = 100; grid.mS = 100; grid.mAlpha = 100
tumourContent = 1.0
if (is.null(burnIn)) burnIn <- floor(niter/10)
MCMCOptions <- list(thinning = thinning, niter = numOfIterations, burnIn = burnIn)
thinning = 1
if (is.null(burnIn)) burnIn <- floor(niter/10)
MCMCOptions <- list(thinning = thinning, niter = numOfIterations, burnIn = burnIn)
hyperParams <- list(hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s)
a = 0.01; alpha = 0.01; s = 1000; seed = 1; useTraditionalCRP = F;
if (is.null(burnIn)) burnIn <- floor(niter/10)
MCMCOptions <- list(thinning = thinning, niter = numOfIterations, burnIn = burnIn)
hyperParams <- list(hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s)
decay.fn.name <- 'exp.decay.s'
dist.fn <- jaccardDist
set.seed(seed)
res <- driver(niter = numOfIterations, dist.fn = dist.fn,
decay.fn.name =  decay.fn.name,
decay.fn = getFunction(decay.fn.name),
dataPath = dataPath,
outputPath = outputPath,
tumourContent = tumourContent,
genotype.prior.scheme ='PCN',
hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s,
MCMCOptions = MCMCOptions,
grid.mA=grid.mA, grid.mS=grid.mS, grid.mAlpha=grid.mAlpha)
grid.mA = 100; grid.mS = 100; grid.mAlpha = 100
res <- driver(niter = numOfIterations, dist.fn = dist.fn,
decay.fn.name =  decay.fn.name,
decay.fn = getFunction(decay.fn.name),
dataPath = dataPath,
outputPath = outputPath,
tumourContent = tumourContent,
genotype.prior.scheme ='PCN',
hyperParamAlpha=alpha, hyperParamA=a, hyperParamS=s,
MCMCOptions = MCMCOptions,
grid.mA=grid.mA, grid.mS=grid.mS, grid.mAlpha=grid.mAlpha)
res$hyperParams <- hyperParams
res$dataID <- basename(dataPath)
res$TraditionalCRP <- useTraditionalCRP
res
expPath <- res$expPath
estClust <- estimatePointClustering(expPath = expPath, MCMCOptions = MCMCOptions)
estPhi <- estimatePointPhi(expPath = expPath, MCMCOptions = MCMCOptions)
estClust
estClust[1, ]
estPhi <- estimatePointPhi(expPath = expPath, MCMCOptions = MCMCOptions)
estPhi
sDat <- readRDS(dataPath)
sDat
data.frame(mutID = colnames(readRDS(dataPath)$filteredMutMatrix), clusterID = estClust[1, ], phi = estPhi)
data.frame(mutID = colnames(readRDS(dataPath)$filteredMutMatrix), clusterID = estClust[1, ], phi = unname(estPhi))
data.frame(mutID = colnames(readRDS(dataPath)$filteredMutMatrix), phi = unname(estPhi), clusterID = estClust[1, ])
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/ddclone.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/example.R')
1sd
df
expPath
print(scores)
dat <- readRDS(dataPath)
nMut <- length(dat$mutPrevalence)
dat <- readRDS(dataPath)
nMut <- length(dat$mutPrevalence)
data.frame(mutID=1:nMut, phi=as.vector(dat$mutPrevalence))
dat <- readRDS(dataPath)
nMut <- length(dat$mutPrevalence)
goldStandard <- data.frame(mutID=1:nMut, phi=as.vector(dat$mutPrevalence))
goldStandard
as.vector(dat$mutPrevalence)
goldStandard <- data.frame(mutID=1:nMut, clusterID=relabel.clusters(as.vector(dat$mutPrevalence)))
source('R/helper.R')
goldStandard <- data.frame(mutID=1:nMut, clusterID=relabel.clusters(as.vector(dat$mutPrevalence)))
goldStandard
source('R/helper.R')
score <- evaluate.clustering(goldStandard$clusterID, df$clusterID)
score
goldStandard <- data.frame(mutID = 1:nMut,
clusterID = relabel.clusters(as.vector(dat$mutPrevalence)),
phi = as.vector(dat$mutPrevalence))
(phiScore <- mean(abs(goldStandard$phi - df$phi)))
print(scores)
score <- data.frame(clustScore, phiScore)
goldStandard <- data.frame(mutID = 1:nMut,
clusterID = relabel.clusters(as.vector(dat$mutPrevalence)),
phi = as.vector(dat$mutPrevalence))
# Evaluate clustering
(clustScore <- evaluate.clustering(goldStandard$clusterID, df$clusterID))
# Evaluate prevalence estimates
(phiScore <- mean(abs(goldStandard$phi - df$phi)))
score <- data.frame(clustScore, phiScore)
score
score <- data.frame(clustScore, phiMeanError = phiScore)
score
write.table(t(scores), file.path(expPath, 'result-scores.csv'))
write.table(scores, file.path(expPath, 'result-scores.csv'))
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/example.R')
devtools::load_all(".")
devtools::use_package(plyr)
devtools::use_package('plyr')
devtools::use_package('Matrix')
devtools::use_package('mcclust')
devtools::use_package('lsa')
devtools::use_package('VGAM')
devtools::use_package('vegan')
devtools::use_package('matrixStats')
devtools::load_all(".")
library(ddclone)
?dbetabinom.ab
library(ddclone)
library(VGAM)
?dbetabinom.ab
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/ddclone/R/ddcrp-inference.R')
source('R/ddclone.R')
source('R/helper.R')
dataPath <- './data/dollo.10.48.4.f0.gl0-u.dat'
ddCloneRes <- ddclone(dataPath = dataPath,
outputPath = './output', tumourContent = 1.0,
numOfIterations = 100, thinning = 1, burnIn = 1,
seed = 1)
ddCloneRes <- ddclone(dataPath = dataPath,
outputPath = './output', tumourContent = 1.0,
numOfIterations = 100, thinning = 1, burnIn = 1,
seed = 1)
plot(1)
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/ddclone/demo/example.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/ddclone/demo/example.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/ddclone/demo/example.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/ddclone/demo/example.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/ddclone/demo/example.R')
?plyr
?.
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/ddclone/demo/example.R')
?logSumExp
?comp.psm
?maxpear
install.packages('roxygen')
install.packages(roxygen)
install.packages('roxygen')
install.packages('roxygen2')
library(roxygen2)
devtools::document()
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/ddclone/demo/example.R')
source('~/Google Drive/Masters/Thesis/scripts/ddcrppaper/ddclone/demo/example.R')
?ddclone
?ddclone
devtools::document()
devtools::use_vignette()
library('rmarkdown')
install.packages('rmarkdown')
devtools::use_vignette()
devtools::use_vignette()
devtools::build_vignettes()
devtools::use_vignette('my.Rmd')
devtools::use_vignette('my')
devtools::document()
?ddclone
devtools::document()
