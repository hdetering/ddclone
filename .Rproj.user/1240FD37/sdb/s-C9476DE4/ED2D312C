{
    "contents" : "source('R/helper.R')\nsource('R/ddcrp-inference.R')\nsource('R/env-setup.R')\n\ndriver <- function(niter=100, decay.fn=window.fn.s, decay.fn.name='window.fn.s',\n                   dataPath='', outputPath, genotype.prior.scheme='AB',\n                   dist.fn=jaccardDist, hyperParamAlpha=1, hyperParamA=.5, hyperParamS=1000, tumourContent=1,\n                   MCMCOptions,\n                   grid.mS=10, grid.mA=1000, grid.mAlpha=1000,\n                   rndShuffleHyperParams = T, resampleHyperParams = T, permuteCustomers = T) {\n  mPhi <- 100\n  if (resampleHyperParams) {\n    mS <- grid.mS\n    mA <- grid.mA\n    mAlpha <- grid.mAlpha\n    sRange <- list(min=10, max=max(hyperParamS, 1000))\n    aRange <- list(min=0.01, max=max(hyperParamA, 1))\n    alphaRange <- list(min=0.01, max=max(10, hyperParamAlpha))\n  } else {\n    mS <- 1\n    mA <- 1\n    mAlpha <- 1\n    sRange <- list(min=hyperParamS, max=hyperParamS)\n    aRange <- list(min=hyperParamA, max=hyperParamA)\n    alphaRange <- list(min=hyperParamAlpha, max=hyperParamAlpha)\n  }\n\n  # create experiment DIR\n  if (is.null(outputPath)) {\n    basePath <- get.path('.')\n    timeTag <- format(Sys.time(), \"%Y-%m-%d-%H-%M-%OS6\")\n    expPath <- file.path(basePath, timeTag)\n  } else {\n    expPath <- outputPath\n  }\n\n  dir.create(expPath, recursive = T, showWarnings = F)\n  print(expPath)\n\n  dataID <- basename(dataPath)\n  simulatedData <- readRDS(dataPath)\n  distMat <- dist.fn(simulatedData)\n  dat <- make.pyclone.input(simulatedData)\n\n  # dirichlet process concentration alpha, decay function parameter a, and betabinomial precision s\n  hyperParams <- list(alpha=hyperParamAlpha, a=hyperParamA, s=hyperParamS, t=tumourContent)\n\n  # Jaccard distance\n  dist.fn <- matrix.dist.fn(distMat)\n\n  datM <- Matrix(as.matrix(data.frame(seq(nrow(dat)))))\n\n  profile <- list(mPhi=mPhi, mS=mS, mA=mA, mAlpha=mAlpha,\n                  MCMCOptions, hyperParams, decay.fn.name=decay.fn.name,\n                  simulated.data.id=basename(dataPath), genotype.prior.scheme=genotype.prior.scheme,\n                  result.path=expPath)\n  write.table(t(as.data.frame(profile)), file.path(expPath, 'config.csv'))\n\n  psi.priors <- make.psi.priors(cpDat = data.frame(minor_cn=dat$minor_cn, major_cn=dat$major_cn), scheme = genotype.prior.scheme)\n\n  print('Generating cached matrices')\n  LCACHED <<- make.cached.genotype.aware.likelihood(mPhi, dat, mS, dataID, psi.priors, sRange, tumourContent = tumourContent)\n  Decay.CACHED <<- make.cached.decay(mA, distMat, decay.fn, decay.fn.name, dataID, aRange)\n  AlphaCACHED  <<- make.cached.alpha(mAlpha, distMat, decay.fn, decay.fn.name, dataID, alphaRange)\n\n  # log-likelihood\n  lhood.fn <- cached.pyclone.dd.crp.likelihood(dat)\n\n  ddcrp <- ddcrp.gibbs(dat=datM,\n                       lhood.fn=lhood.fn,\n                       dist.fn=dist.fn,\n                       decay.fn=decay.fn,\n                       summary.fn=ncomp.summary,\n                       log.prior.thresh = -10,\n                       hyperParams=hyperParams,\n                       MCMCOptions=MCMCOptions,\n                       phi.traj=TRUE,\n                       clust.traj=TRUE,\n                       processor.fn=sample.processor,\n                       resampleHyperParams = resampleHyperParams,\n                       permuteCustomers = permuteCustomers,\n                       expPath = expPath)\n\n  saveRDS(ddcrp, file.path(expPath, 'clust-result-obj.dat'))\n  append.traj(ddcrp$phi.traj, ddcrp$clust.traj, ddcrp$hyperParamTraj, expPath)\n\n  print(expPath)\n  msg('Done!')\n  list(expPath=expPath)\n}\n",
    "created" : 1467242004345.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "",
    "hash" : "174317677",
    "id" : "ED2D312C",
    "lastKnownWriteTime" : 1467252347,
    "path" : "~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/driver.R",
    "project_path" : "R/driver.R",
    "properties" : {
    },
    "relative_order" : 3,
    "source_on_save" : false,
    "type" : "r_source"
}