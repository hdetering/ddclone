{
    "contents" : "#\n# --- mathematics ---\n#\n\n# safe log function: smoothly handles zero and infinity\nexp300 <- exp(-500)\n\nsafelog <- function(x) {\n  x[x < exp300] <- exp300\n  lx <- log(x)\n  lx\n}\n\n# given log(v), returns log(sum(v))\nlog.sum <- function(v) {\n  log.sum.pair <- function(x,y)\n  {\n    if ((y == -Inf) && (x == -Inf)) return(-Inf);\n    if (y < x) return(x+log(1 + exp(y-x)))\n    else return(y+log(1 + exp(x-y)));\n  }\n\n  if (length(v) == 1) return(v)\n  r <- v[1];\n  for (i in 2:length(v))\n    r <- log.sum.pair(r, v[i])\n  return(r)\n}\n\n\n# harmonic mean\n# !!! what's with all these negatives?\n\nharmonic.mean <- function(x)\n{\n  -(-log(length(x)) + log.sum(-x))\n}\n\n\n# exchangeable dirichlet likelihood\n\nexch.dirichlet.lhood <- function(counts, hyper)\n{\n  k <- length(counts)\n  idx <- counts > 0\n  v <- (lgamma(k*hyper) - sum(idx)*lgamma(hyper) +\n          sum(lgamma(hyper+counts[idx])) - lgamma(sum(counts[idx])+k*hyper))\n\n\n  v\n}\n\n\ndirichlet.lhood <- function(counts, alpha)\n{\n  k <- length(counts)\n  idx <- counts > 0\n  v <- (lgamma(sum(alpha)) -\n          sum(lgamma(alpha[idx])) +\n          sum(lgamma(alpha[idx] + counts[idx])) -\n          lgamma(sum(counts)+sum(alpha)))\n\n  v\n}\n\n# draw from a dirichlet\nrdirichlet <- function(n, alpha)\n{\n  l <- length(alpha)\n  x <- matrix(rgamma(l * n, alpha), ncol = l, byrow = TRUE)\n  sm <- x %*% rep(1, l)\n  x/as.vector(sm)\n}\n\n\n# the logistic function\nlogistic <- function(x) exp(x) / (1 + exp(x))\n\n\n\n\n# liu's alpha identity\n\nliu <- function(a, n)\n{\n  sum(sapply(1:n, function (i) a/(a + i - 1)))\n}\n\n\n# --- other ---\n\nmsg <- function(s, ...)\n{\n  time <- format(Sys.time(), \"%X\")\n  cat(sprintf(\"%s | %s\\n\", time, s))\n}\n\nchar <- as.character\n\ncolsum <- function (x)\n{\n  if (is.null(dim(x)) || (dim(x)[1] == 1))\n    x\n  else\n    colSums(x)\n}\n\n\n\nsafelog.old <- function (x) {d\n  safelog.f <- function (x) {\n    if (x == Inf)\n      Inf\n    else if (x == 0)\n      -100\n    else\n      log(x)\n  }\n\n  if (length(x) == 1)\n    safelog.f(x)\n  else{\n    #apply(xx, seq(dim(xx)), log)\n    apply(x, 1:ifelse(is.null(dim(x)), 1, length(dim(x))), log)\n  }\n}\n\n",
    "created" : 1467241197188.000,
    "dirty" : false,
    "encoding" : "UTF-8",
    "folds" : "42|1|50|0|\n54|1|63|0|\n84|1|86|0|\n92|1|95|0|\n109|29|125|0|\n",
    "hash" : "3400856635",
    "id" : "3AE77AA4",
    "lastKnownWriteTime" : 1467241246,
    "path" : "~/Google Drive/Masters/Thesis/scripts/ddcrppaper/submission.code/ddclone/R/helper-math.R",
    "project_path" : "R/helper-math.R",
    "properties" : {
    },
    "relative_order" : 7,
    "source_on_save" : false,
    "type" : "r_source"
}